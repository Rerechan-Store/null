#!/bin/bash
domain=$(cat /etc/xray/domain)
ipvps=$(curl ifconfig.me)
uuid=$(cat /proc/sys/kernel/random/uuid)
xp
clear
addvm() {
clear
until [[ $user =~ ^[a-za-z0-9_]+$ && ${client_exists} == '0' ]]; do
clear
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\\e[0;41;36m      add v2ray/vmess account      \e[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
read -rp "user: " -e user
read -p "expired (days): " masaaktif
client_exists=$(grep -w $user /usr/bin/config.json | wc -l)
if [[ ${client_exists} == '1' ]]; then
clear
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\\e[0;41;36m      add v2ray/vmess account      \e[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo "a client with the specified name was already created, please choose another name."
echo ""
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
read -n 1 -s -r -p "press any key to back on menu"
menu
fi
done
exp=`date -d "$masaaktif days" +"%y-%m-%d"`
sed -i '/#vmess$/a\### '"$user $exp"'\
},{"id": "'""$uuid""'","alterid": '"0"',"email": "'""$user""'"' /usr/bin/config.json
exp=`date -d "$masaaktif days" +"%y-%m-%d"`
sed -i '/#vmessgrpc$/a\### '"$user $exp"'\
},{"id": "'""$uuid""'","alterid": '"0"',"email": "'""$user""'"' /usr/bin/config.json
acs=`cat<<eof
{
"v": "2",
"ps": "${user}",
"add": "${domain}",
"port": "443",
"id": "${uuid}",
"aid": "0",
"net": "ws",
"path": "/vmessws",
"type": "none",
"host": "${domain}",
"tls": "tls"
}
eof`
ask=`cat<<eof
{
"v": "2",
"ps": "${user}",
"add": "${domain}",
"port": "80",
"id": "${uuid}",
"aid": "0",
"net": "ws",
"path": "/vmessws",
"type": "none",
"host": "${domain}",
"tls": "none"
}
eof`
grpc=`cat<<eof
{
"v": "2",
"ps": "${user}",
"add": "${domain}",
"port": "443",
"id": "${uuid}",
"aid": "0",
"net": "grpc",
"path": "vmess-grpc",
"type": "none",
"host": "${domain}",
"tls": "tls"
}
eof`
vmess_base641=$( base64 -w 0 <<< $vmess_json1)
vmess_base642=$( base64 -w 0 <<< $vmess_json2)
vmess_base643=$( base64 -w 0 <<< $vmess_json3)
vmesslink1="vmess://$(echo $acs | base64 -w 0)"
vmesslink2="vmess://$(echo $ask | base64 -w 0)"
vmesslink3="vmess://$(echo $grpc | base64 -w 0)"
systemctl restart xray > /dev/null 2>&1
service cron restart > /dev/null 2>&1
clear
TEKS="
================================
[<=   v2ray vmess acount   =>]
================================
hostname     : $domain
username     : $user
expired      : $exp
================================
acount information
================================
alterid      : 0
security     : auto
network      : ws ( websocket )
id / uuid    : $uuid
path ws      : /vmessws
dynamic path : https://bug.com/vmessws
service name : vmess-grpc
================================
port & service
================================
ws tls/ssl   : 443
ws nontls    : 80
vmess grpc   : 443
================================
link tls     : ${vmesslink1}
================================
link nontls  : ${vmesslink2}
================================
link grpc    : ${vmesslink3}
================================"
telegram-send --pre "$TEKS"
clear
echo -e " $TEKS "
}

addtr() {
until [[ $user =~ ^[a-za-z0-9_]+$ && ${user_exists} == '0' ]]; do
clear
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\e[0;41;36m           trojan account          \e[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
read -rp "user: " -e user
user_exists=$(grep -w $user /usr/bin/config.json | wc -l)
if [[ ${user_exists} == '1' ]]; then
clear
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\e[0;41;36m           trojan account          \e[0m"
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo "a client with the specified name was already created, please choose another name."
echo ""
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
read -n 1 -s -r -p "press any key to back on menu"
menu
fi
done
read -p "expired (days): " masaaktif
exp=`date -d "$masaaktif days" +"%y-%m-%d"`
sed -i '/#trojanws$/a\### '"$user $exp"'\
},{"password": "'""$uuid""'","email": "'""$user""'"' /usr/bin/config.json
sed -i '/#trojangrpc$/a\### '"$user $exp"'\
},{"password": "'""$uuid""'","email": "'""$user""'"' /usr/bin/config.json
trojanlink1="trojan://${uuid}@${domain}:443?mode=gun&security=tls&type=grpc&servicename=trojan-grpc&sni=${domain}#${user}"
trojanlink="trojan://${uuid}@${domain}:443?path=%2ftrojanws&security=tls&host=${domain}&type=ws&sni=${domain}#${user}"
systemctl restart trojan-go.service
systemctl restart xray.service
clear
TEKS3="
================================
[<= trojan acount =>]
================================
hostname    : ${domain}
username    : ${user}
expired     : ${exp}
================================
acount information
================================
uuid/key     : $uuid
path trojan  : /trojanws
dynamic path : https://bug.com/trojanws
service name : trojan-grpc
================================
port & service
================================
trojan ws tls : 443
trojan grpc   : 443
================================
link trojan ws   : $trojanlink
================================
link trojan grpc : $trojanlink1
================================"
telegram-send --pre "$TEKS3"
clear
echo -e " $TEKS3 "
}

hapus() {
clear
number_of_clients=$(grep -c -e "^### " "/usr/bin/config.json")
if [[ ${number_of_clients} == '0' ]]; then
clear
echo -e "
————————————————————————————————————————————————————
delete v2ray account
————————————————————————————————————————————————————
you have no existing clients!
————————————————————————————————————————————————————"
fi
clear
echo -e "
————————————————————————————————————————————————————
delete v2ray account
————————————————————————————————————————————————————
user  expired
————————————————————————————————————————————————————"
grep -e "^### " "/usr/bin/config.json" | cut -d ' ' -f 2-3 | column -t | sort | uniq
echo "
————————————————————————————————————————————————————"
read -rp "input username : " user
if [ -z $user ]; then
menu
else
exp=$(grep -we "^### $user" "/usr/bin/config.json" | cut -d ' ' -f 3 | sort | uniq)
sed -i "/^### $user $exp/,/^},{/d" /usr/bin/config.json
sed -i "/^### $user $exp/d" /etc/trojan-go/akun.conf
sed -i '/^,"'"$user"'"$/d' /etc/trojan-go/config.json
systemctl restart trojan-go
systemctl restart xray
clear
echo -e "
————————————————————————————————————————————————————
succses delete v2ray  account
————————————————————————————————————————————————————
client name : $user
expired on  : $exp
————————————————————————————————————————————————————
"
fi
}
renew() {
clear
number_of_clients=$(grep -c -e "^### " "/usr/bin/config.json")
if [[ ${number_of_clients} == '0' ]]; then
clear
echo -e "
————————————————————————————————————————————————————
extend v2ray account
————————————————————————————————————————————————————
you have no existing clients!
————————————————————————————————————————————————————
"
read -n 1 -s -r -p "press any key to back on menu"
menu
fi
clear
echo -e "
————————————————————————————————————————————————————
extend v2ray account
————————————————————————————————————————————————————
user  expired
————————————————————————————————————————————————————"
grep -e "^### " "/usr/bin/config.json" | cut -d ' ' -f 2-3 | column -t | sort | uniq
echo ""
echo -e "tap enter to go back
————————————————————————————————————————————————————"
read -rp "input username : " user
if [ -z $user ]; then
menu
else
read -p "expired (days): " masaaktif
exp=$(grep -we "^### $user" "/usr/bin/config.json" | cut -d ' ' -f 3 | sort | uniq)
now=$(date +%y-%m-%d)
d1=$(date -d "$exp" +%s)
d2=$(date -d "$now" +%s)
exp2=$(( (d1 - d2) / 86400 ))
exp3=$(($exp2 + $masaaktif))
exp4=`date -d "$exp3 days" +"%y-%m-%d"`
sed -i "/### $user/c\### $user $exp4" /usr/bin/config.json
sed -i "s/### $user $exp/### $user $exp4/g" /etc/trojan-go/akun.conf
systemctl restart xray
systemctl restart trojan-go
clear
echo -e "
————————————————————————————————————————————————————
v2ray account success extended
————————————————————————————————————————————————————
client name : $user
extend ?    : $masaaktif
expired on  : $exp4
————————————————————————————————————————————————————
"
fi
}

cek() {
df='\e[39m'
bold='\e[1m'
blink='\e[5m'
yell='\e[33m'
red='\e[31m'
green='\e[32m'
blue='\e[34m'
purple='\e[35m'
cyan='\e[36m'
lred='\e[91m'
lgreen='\e[92m'
lyellow='\e[93m'
nc='\e[0m'
green='\033[0;32m'
orange='\033[0;33m'
light='\033[0;37m'
grenbo="\e[92;1m"
clear
function con() {
local -i bytes=$1;
if [[ $bytes -lt 1024 ]]; then
echo "${bytes}b"
elif [[ $bytes -lt 1048576 ]]; then
echo "$(( (bytes + 1023)/1024 ))kb"
elif [[ $bytes -lt 1073741824 ]]; then
echo "$(( (bytes + 1048575)/1048576 ))mb"
else
echo "$(( (bytes + 1073741823)/1073741824 ))gb"
fi
}
echo -n > /tmp/other.txt
data=( `cat /usr/bin/config.json | grep '###' | cut -d ' ' -f 2 | sort | uniq`);
clear
echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" | lolcat
echo -e " \e[1;97;101m           cek v2ray account            \e[0m"
echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" | lolcat
echo -e "\033[1;36m└─────────────────────────────────────────┐\033[0m"
for akun in "${data[@]}"
do
if [[ -z "$akun" ]]; then
akun="tidakada"
fi
echo -n > /tmp/ipvmess.txt
data2=( `cat /var/log/xray/access.log | tail -n 500 | cut -d " " -f 3 | sed 's/tcp://g' | cut -d ":" -f 1 | sort | uniq`);
for ip in "${data2[@]}"
do
jum=$(cat /var/log/xray/access.log | grep -w "$akun" | tail -n 500 | cut -d " " -f 3 | sed 's/tcp://g' | cut -d ":" -f 1 | grep -w "$ip" | sort | uniq)
if [[ "$jum" = "$ip" ]]; then
echo "$jum" >> /tmp/ipvmess.txt
else
echo "$ip" >> /tmp/other.txt
fi
jum2=$(cat /tmp/ipvmess.txt)
sed -i "/$jum2/d" /tmp/other.txt > /dev/null 2>&1
done
jum=$(cat /tmp/ipvmess.txt)
if [[ -z "$jum" ]]; then
echo > /dev/null
else
jum2=$(cat /tmp/ipvmess.txt | wc -l)
lastlogin=$(cat /var/log/xray/access.log | grep -w "$akun" | tail -n 500 | cut -d " " -f 2 | tail -1)
log1=$(cat /var/log/xray/access.log | grep -w "$akun" | tail -n 500 | cut -d " " -f 5 | tail -1)
printf "  %-13s %-7s %-8s %2s\n" "username   : ${akun}"
printf "  %-13s %-7s %-8s %2s\n" "jumlah ip  : $jum2"
printf "  %-13s %-7s %-8s %2s\n" "last login : $lastlogin"
printf "  %-13s %-7s %-8s %2s\n" "Akses Web  : $log1";
echo -e "\033[1;36m┌─────────────────────────────────────────┘\033[0m"
fi
rm -rf /tmp/ipvmess.txt
done
rm -rf /tmp/other.txt
echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" | lolcat
echo -e "\e[1;97;101m         done cek v2ray account           \e[0m"
echo -e "\033[1;36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m" | lolcat
}

mx() {
touch /root/.system
clear
echo -e "\033[1;36m┌─────────────────────────────────────────┐\033[0m" | lolcat
echo -e "        =[ member v2ray account ]=         "
echo -e "\033[1;36m└─────────────────────────────────────────┐\033[0m" | lolcat
echo -n > /root/.accsess.log
data=( $(cat /usr/bin/config.json | grep '###' | cut -d ' ' -f 2 | sort | uniq) )
for user in "${data[@]}"
do
echo > /dev/null
jum=$(cat /usr/bin/config.json | grep -c '###' | awk '{print $1/2}')
if [[ $jum -gt 0 ]]; then
exp=$(grep -wE "^### $user" "/usr/bin/config.json" | cut -d ' ' -f 3 | sort | uniq)
echo -e "  \e[33;1mUser\e[32;1m  : $user"
echo -e "  \e[33;1mExp\e[32;1m   : $exp"
echo -e "\033[1;36m┌─────────────────────────────────────────┘\033[0m" | lolcat
echo "slot" >> /root/.system
else
echo > /dev/null
fi
sleep 0.1
done
aktif=$(cat /root/.system | wc -l)
echo -e "\033[1;36m┌─────────────────────────────────────────┐\033[0m" | lolcat
echo -e "   $aktif Member Active"
echo -e "\033[1;36m└─────────────────────────────────────────┘\033[0m" | lolcat
sed -i "d" /root/.system
}

restart() {
xp
systemctl daemon-reload
systemctl restart nginx xray
clear
menu
}

limit() {
clear
Green_font_prefix="\033[32m" && Red_font_prefix="\033[31m" && Green_background_prefix="\033[42;37m" && Red_background_prefix="\033[41;37m" && Font_color_suffix="\033[0m"
Info="${Green_font_prefix}[ON]${Font_color_suffix}"
Error="${Red_font_prefix}[OFF]${Font_color_suffix}"
cek=$(cat /home/limit)
NIC=$(ip -o $ANU -4 route show to default | awk '{print $5}');
function start () {
echo -e "Limit Speed All Service"
read -p "Set maximum download rate (in Kbps): " down
read -p "Set maximum upload rate (in Kbps): " up
if [[ -z "$down" ]] && [[ -z "$up" ]]; then
echo > /dev/null 2>&1
else
echo "Start Configuration"
sleep 0.5
wondershaper -a $NIC -d $down -u $up > /dev/null 2>&1
systemctl enable --now wondershaper.service
echo "start" > /home/limit
echo "Done"
fi
}
function stop () {
wondershaper -ca $NIC
systemctl stop wondershaper.service
echo "Stop Configuration"
sleep 0.5
echo > /home/limit
echo "Done"
}
if [[ "$cek" = "start" ]]; then
sts="${Info}"
else
sts="${Error}"
fi
clear
echo -e "=================================="
echo -e "    Limit Bandwidth Speed $sts    "
echo -e "=================================="
echo -e "[1]. Start Limit"
echo -e "[2]. Stop Limit"
echo -e "==============================="
read -rp "Please Enter The Correct Number : " -e num
if [[ "$num" = "1" ]]; then
start
elif [[ "$num" = "2" ]]; then
stop
else
clear
echo " You Entered The Wrong Number"
menu
fi
}

backup() {
clear
IP=$(curl ifconfig.me);
date=$(date +"%Y-%m-%d")
clear
mkdir /home
clear
email=$(cat /home/email)
if [[ "$email" = "" ]]; then
echo "Masukkan Email Untuk Menerima Backup"
read -rp "Email : " -e email
cat <<EOF>>/home/email
$email
EOF
fi
clear
echo "Mohon Menunggu , Proses Backup sedang berlangsung !!"
rm -rf /root/backup
mkdir /root/backup
cp -r /etc/xray backup/xray
cp /usr/bin/config.json /root/backup
cp -r /home/vps/public_html backup/public_html
cp -r /var/www/html backup/html
cd /root
zip -r $IP-$date.zip backup > /dev/null 2>&1
rclone copy /root/$IP-$date.zip dr:backup/
url=$(rclone link dr:backup/$IP-$date.zip)
id=(`echo $url | grep '^https' | cut -d'=' -f2`)
link="https://drive.google.com/u/4/uc?id=${id}&export=download"
echo -e "
Detail Backup 
==================================
IP VPS        : $IP
Link Backup   : $link
Tanggal       : $date
==================================
" | mail -s "Backup Data" $email
rm -rf /root/backup
rm -r /root/$IP-$date.zip
clear
echo -e "
Detail Backup 
==================================
IP VPS        : $IP
Link Backup   : $link
Tanggal       : $date
==================================
"
echo "Silahkan cek Kotak Masuk $email"
rm -fr /root/*.zip
}

restore() {
clear
echo "This Feature Can Only Be Used According To Vps Data With This Autoscript"
echo "Please input link to your vps data backup file."
echo "You can check it on your email if you run backup data vps before."
read -rp "Link File: " -e url
wget -O backup.zip "$url"
unzip backup.zip
rm -f backup.zip
sleep 1
echo Start Restore
cd /root/backup
cp -r xray /etc/
cp -r public_html /home/vps/
cp -r html /var/www/
cp config.json /usr/bin
cd
rm -rf /root/backup
rm -f backup.zip
clear
echo " Mengaktifkan Xray "
systemctl daenon-reload
systemctl restart xray
clear
echo "Done"
}


echo "
=================================
[ <=   X-RAY VPN STORE『EA』 => ]
=================================
[          X-RAY PANEL          ]
=================================
DOMAIN: $domain
IPVPS : $ipvps
=================================

01. BIKIN AKUN VMESS
02. BIKIN AKUN TROJAN
03. CEK USER LOGIN X-RAY
04. HAPUS AKUN X-RAY
05. RENEW AKUN X-RAY
=================================

06. BACKUP DATA VPN
07. RESOTE DATA VPN
08. RESTART ALL SERVICE
09. CEK USAGE CPU/RAM/SWAP
10. LIMIT SPEED VPS
11. JUMLAH AKUN X-RAY AKTIF
=================================
"
echo ""
read -p "Pilih Menu: " asw
case $asw in
1) addvm ;;
2) addtr ;;
3) cek ;;
4) hapus ;;
5) renew ;;
6) backup ;;
7) restore ;;
8) restart ;;
9) htop ;;
10) limit ;;
11) mx
*) clear ; menu ;;
esac
